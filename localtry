#!/bin/bash

# The directory to use
DIR=test.local

# Uncomment to use valgrind
#export VALGRIND="valgrind --trace-children=yes --leak-check=full"

# Uncomment to do IO counting
#export IO_COUNT='LD_PRELOAD=$WD/io_count.so'

# Uncomment to enable oprofile
#OPROF="LD_LIBRARY_PATH=/usr/lib/debug"

make || exit $?

echo -n "Creating test directory... "
rm -rf $DIR
mkdir $DIR
cat > $DIR/tests << EOF
tx
info
dtable
rollover
rollover -b
rollover -b -r
abort
#abort perf
edtable
#edtable perf
odtable
ussdtable
bfdtable
sidtable
didtable
kddtable
ctable
cctable
stable
iterator
blob_cmp
#tpchtype row
#tpchgen
#tpchtest
#bdbtest
#consistency
#consistency check
#durability
#durability check
EOF
mkdir $DIR/journals
ln -s "`pwd`/tpch" $DIR
echo "done."

if [ "$OPROF" ]
then
	sudo opcontrol --init
	sudo opcontrol --reset
	sudo opcontrol "--vmlinux=/usr/src/linux-`uname -r`/vmlinux"
	sudo opcontrol --start
fi

# Run the performance test
echo "performance seek" | (WD="`pwd`"; cd $DIR; ulimit -c unlimited; eval $IO_COUNT $OPROF exec $VALGRIND '"$WD/anvil"')
find $DIR -type f -print0 | xargs -0 ls -l

if [ "$OPROF" ]
then
	sudo opcontrol --shutdown
	sudo opcontrol --deinit
	opreport --symbols main > oprofile
else
	rm -f oprofile
fi

if [ ! -f $DIR/core ]
then
	# Run the blob_cmp performance test
	echo "blob_cmp perf" | (WD="`pwd`"; cd $DIR; ulimit -c unlimited; eval $IO_COUNT $OPROF exec $VALGRIND '"$WD/anvil"')
	find $DIR -type f -print0 | xargs -0 ls -l
	
	if [ ! -f $DIR/core ]
	then
		# Run some tests
		echo "script tests" | (WD="`pwd`"; cd $DIR; ulimit -c unlimited; eval $IO_COUNT $OPROF exec $VALGRIND '"$WD/anvil"')
		find $DIR -type f -print0 | xargs -0 ls -l
		
		# Allow custom commands
		#(WD="`pwd`"; cd $DIR; ulimit -c unlimited; eval $IO_COUNT $OPROF exec $VALGRIND '"$WD/anvil"')
		#find $DIR -type f -print0 | xargs -0 ls -l
		
		# Filter the system journal
		true | (WD="`pwd`"; cd $DIR; ulimit -c unlimited; eval $IO_COUNT $OPROF exec $VALGRIND '"$WD/anvil"')
		ls -l $DIR/sys_journal*
		
		# If we comment out all the commands above, we
		# need something here so bash doesn't complain
		true
	fi
fi

echo -ne \\007

rm -f gmon.out* gmon.sum*
if [ -f $DIR/gmon.out ]
then
	echo -n "Processing gprof data... "
	cp $DIR/gmon.out* .
	for gmon in gmon.out*
	do
		gprof main $gmon > ${gmon/out/sum}
	done
	echo "done."
fi
if [ -f $DIR/core ]
then
	echo "Starting debugger on core."
	gdb -q -c $DIR/core main
fi
